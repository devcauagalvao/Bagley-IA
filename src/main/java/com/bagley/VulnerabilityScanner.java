package com.bagley;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.util.HashMap;
import java.util.Map;

public class VulnerabilityScanner {

    private static final Map<Integer, String> commonPorts = new HashMap<>();

    static {
        commonPorts.put(21, "FTP");
        commonPorts.put(22, "SSH");
        commonPorts.put(23, "Telnet");
        commonPorts.put(80, "HTTP");
        commonPorts.put(443, "HTTPS");
        commonPorts.put(3306, "MySQL");
        commonPorts.put(8080, "HTTP Proxy");
        commonPorts.put(3389, "RDP");
    }

    public void scanPort(String ip, int port) {
        try (Socket socket = new Socket()) {
            socket.connect(new InetSocketAddress(ip, port), 2000); // Timeout de 2 segundos
            System.out.println("Bagley: Porta " + port + " aberta no IP " + ip);

            // Realiza o Banner Grabbing (tentativa de identificar o serviço)
            String serviceInfo = getBanner(ip, port);
            System.out.println("Bagley: Serviço detectado na porta " + port + ": " + serviceInfo);
            
            // Realiza uma análise de vulnerabilidade básica para o serviço encontrado
            checkVulnerabilities(port, serviceInfo);

        } catch (IOException e) {
            System.out.println("Bagley: Porta " + port + " fechada ou inacessível no IP " + ip);
        }
    }

    public void scanVulnerabilities(String ip) {
        // Exemplo de varredura de vulnerabilidades verificando portas padrão
        System.out.println("Bagley: Iniciando varredura de vulnerabilidades no IP " + ip);
        for (int port : commonPorts.keySet()) {
            scanPort(ip, port);
        }
    }

    private String getBanner(String ip, int port) {
        // Tentativa de banner grabbing simples: conecta à porta e lê uma linha do serviço
        try (Socket socket = new Socket()) {
            socket.connect(new InetSocketAddress(ip, port), 2000); // Timeout de 2 segundos
            BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            String banner = reader.readLine();
            return banner != null ? banner : "Nenhum banner detectado";
        } catch (IOException e) {
            return "Falha ao obter banner";
        }
    }

    private void checkVulnerabilities(int port, String serviceInfo) {
        // Exemplo de como identificar vulnerabilidades para alguns serviços conhecidos
        if (serviceInfo.contains("Apache")) {
            System.out.println("Bagley: Alerta de vulnerabilidade: Apache pode ter falhas em versões antigas.");
        } else if (serviceInfo.contains("nginx")) {
            System.out.println("Bagley: Alerta de vulnerabilidade: nginx pode ter falhas em versões antigas.");
        } else if (serviceInfo.contains("MySQL")) {
            System.out.println("Bagley: Alerta de vulnerabilidade: MySQL pode ser vulnerável a ataques de injeção SQL em versões antigas.");
        }
    }

    public static void main(String[] args) {
        // Exemplo de uso:
        VulnerabilityScanner scanner = new VulnerabilityScanner();
        scanner.scanVulnerabilities("192.168.1.1");  // Teste com um IP qualquer
    }
}
